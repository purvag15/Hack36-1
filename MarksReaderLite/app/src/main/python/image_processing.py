# -*- coding: utf-8 -*-
"""image processing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HrwWOnQ1zLnQHGuSg1Nr-sIgqVHDypQy
"""

# !pip install tensorflow keras numpy mnist matplotlib

def main(img):
  import pylab
  processed_image=[]
  all_digits=[]
  from PIL import Image
  from pylab import array
  import PIL.ImageOps   
  from PIL import Image
  import numpy as np
  import matplotlib.pyplot as plt
  #######----------- STEP 1 - CONVERT IMAGE TO PIXELS ----------#########
  full=img
  full = full.resize((750,1000))
  full.size
  full=array(full)
  # print(full)
  # print(img.shape)
  # print(full.size)
  print(full.size) #750,1000
  if(full.size>=750000):
    full=full[0:1000,0:750,0:1]
  print(full.shape)
  print(full.size)
  full=full.reshape((-1,750000))
  full=(full-np.min(full))
  full=full/np.max(full)
  full=full*255
  full=np.where(full<100, 0, full)
  full=np.where(full>=100, 255, full)
  pixels=full.reshape((1000,750))
  plt.imshow(pixels)
  plt.show()
  print(pixels.shape)
  pixels2=pixels

###########---------------------------------------------################
###########-------- STEP 2 - Removing top, bottom, left and right white spaces from photograph ------------#############
  pixels=pixels2
  row_sums = pixels.sum(axis=1)
  column_sums = pixels.sum(axis=0)
  # print(pixels.shape)
  while average(pixels[0])>240:
    pixels = np.delete(pixels, 0, 0) #delete top white space
  while average(pixels[pixels.shape[0]-1])>240:
    pixels = np.delete(pixels, pixels.shape[0]-1, 0) #delete bottom white space
  # print(pixels.shape)

  start=0
  while column_sums[start]>=column_sums[0]:
    start=start+1
  pixels=pixels[:,start:] #delete left whitespaces
  column_sums = pixels.sum(axis=0)

  start=pixels.shape[1]-1
  while column_sums[start]>=column_sums[0]:
    start=start-1
  pixels=pixels[:,0:start] #delete right whitespaces

  # print(pixels[0])
  plt.imshow(pixels)
  plt.show()
  # print(pixels[0])

  data = Image.fromarray(pixels)
  data = data.convert("L")

  # print(type(data))
  # data.save('test.jpg')

  # print(pixels[0])
###########--------------------------------------------------------------------------------################

  ###########-------- STEP 2 - Removing top, bottom, left and right white spaces from photograph ------------#############
  pixels=pixels2
  row_sums = pixels.sum(axis=1)
  column_sums = pixels.sum(axis=0)
  # print(pixels.shape)
  while average(pixels[0])>240:
    pixels = np.delete(pixels, 0, 0) #delete top white space
  while average(pixels[pixels.shape[0]-1])>240:
    pixels = np.delete(pixels, pixels.shape[0]-1, 0) #delete bottom white space
  # print(pixels.shape)

  start=0
  while column_sums[start]>=column_sums[0]:
    start=start+1
  pixels=pixels[:,start:] #delete left whitespaces
  column_sums = pixels.sum(axis=0)

  start=pixels.shape[1]-1
  while column_sums[start]>=column_sums[0]:
    start=start-1
  pixels=pixels[:,0:start] #delete right whitespaces

  # print(pixels[0])
  plt.imshow(pixels)
  plt.show()
  # print(pixels[0])

  data = Image.fromarray(pixels)
  data = data.convert("L")

  # print(type(data))
  # data.save('test.jpg')

  # print(pixels[0])
  ###########--------------------------------------------------------------------------------################

    ########-------STEP 3 - Splitting big image to small images (getting number in each row)-------#########

  im=data
  no_of_entries = 15
  l = [] #list to keep all rows in form of images.

  for i in range(0, no_of_entries):
    width, height = im.size
    fiveper = height*9//(no_of_entries*100)
    fiftper = width*15/200
    left = (width/2)+fiftper
    right = width-fiftper
    top = i*int(height//no_of_entries)+fiveper
    bottom = int(height//no_of_entries)*(i+1)-fiveper
    # print(bottom)
    im1 = im.crop((left, top, right, bottom))
    imhk = im1.save(str(i)+"testcrop.jpg")
    l.append(im1)
  # x=0

  ##########------------------------------------------------------------------------------###########

    x=0
  print(len(l))
  for i in l:
    if x!=0:
      all_digits=[]
      get_value(i)
      # mark=0
      # print(temparr)
      # for digitt in temparr:
      #   mark=mark*10
        # mark=mark+int(digitt)
      # marks.append(mark)
      # ikj=i.save("new\ "+str(x)+".jpg")
    
    x=x+1
  return processed_image

#################------------- STEP 4 - EXTRACT THE INDIVIDUAL DIGITS FROM IMAGE --------#########
def get_separate_digits(x):
  if x==0:
    return
    global all_digits
  global column_sums
  global pixels

  column_sums = pixels.sum(axis=0)
  start=0
  # print(len(column_sums))
  whiteval=column_sums[0]
  while column_sums[start]>=whiteval:
    start=start+1
    if(start==len(column_sums)):
      return
  pixels=pixels[:,start:] #delete left whitespaces
  column_sums=column_sums[start:]
  end=0
  start=0
  while column_sums[end]<whiteval:
    end=end+1
    if end==len(column_sums)-1:
      break
  # print(pixels[:,start:end])
  all_digits.append(pixels[:,start:end])  
  
  pixels=pixels[:,end:]
  
  column_sums=column_sums[end:]
  get_separate_digits(len(column_sums))

def remove_space_top_bottom(i):
  row_sums = i.sum(axis=1)
  column_sums = i.sum(axis=0)
  # print(pixels.shape)
  while average(i[0])>240:
    i = np.delete(i, 0, 0) #delete top white space
  while average(i[i.shape[0]-1])>240:
    i = np.delete(i, i.shape[0]-1, 0) #delete bottom white space
#   print(pixels.shape)
  return i

###########-----------COMBINE ALL FUNCTIONS TO GET VALUE FROM STEP 3 TO STEP 6. TAKES ROW IMAGE AS INPUT AND RETURNS THE LIST CONTAINING DIGITS IN THAT ROW -------##########
all_digits=[]
# pixels
# column_sums

def get_value(imgc):
  global all_digits
  all_digits=[]
  global pixels
  global column_sums
  height=imgc.size[1]
  width=imgc.size[0]
  mul=width*height
  imgc = imgc.resize((width,height))
  imgc=array(imgc)

  # print(img.shape)
  # print(img.size)
  # print(imgc.size)
  if(imgc.size>mul):
    imgc=imgc[0:height,0:width,0:1]
  # print(img.shape)
  # print(img.size)
  imgc=imgc.reshape((-1,mul))
  imgc=(imgc-np.min(imgc))
  imgc=imgc/np.max(imgc)
  imgc=imgc*255
  imgc=np.where(imgc<200, 0, imgc)
  imgc=np.where(imgc>=200, 255, imgc)
  pixels=imgc.reshape((height,width))
  plt.imshow(pixels)
  plt.show()
  # print(pixels)
  pixels2=pixels


  pixels=pixels2
  column_sums = pixels.sum(axis=0)
  column_sums_orig=column_sums
  # print(column_sums)
  lastleft=0
  # pix=get_digit() 
  # print(pix)
  # pix=pix.reshape((30,))
  # pix.shape
  # plt.imshow(pix)
  # plt.show()
  # print(lastleft)
  # print(column_sums)

  
  all_digits=[]

  # print(pixels.shape)
  # print(len(column_sums))
  get_separate_digits(len(column_sums))

  # print(all_digits)
  for i in all_digits:
    all_digits[all_digits.index(i)]=remove_space_top_bottom(i)
    # print(i)
    # plt.imshow(i)
    # plt.show()
    # print(pixels)
  # for i in all_digits:
  #   # all_digits[all_digits.index(i)]=remove_space_top_bottom(i)
  #   # print(i)
    
  #   plt.imshow(i)
  #   plt.show()
  # print(len(all_digits))


  #####---------- STEP 5 - adding border to numbers to bring in dimensions similar to MNIST -------------######
  alldigitsarray=[]
  global processed_image
  for i in all_digits:
    # print(i.shape)
    w=i.shape[1]
    h=i.shape[0]
    if np.average(i)==0 and w>h:
      all_digits.remove(i)
      continue
    # if h==1 or w==1:
    #   i=[i]
    # print(i.shape)
    # print(w,h)
    # plt.imshow(i)
    # plt.show()
    h2=18
    w2=h2*w/h
    top=int(ceil(((28-h2)*h)/(2*h2)))
    left=  int(ceil(((28-w2)*w)/(2*w2)))
    # print(top,left)
  
    topwhite = [[255]*w]*top
    itemp=i
    i = np.append(topwhite, i, axis=0)
    i = np.append(i, topwhite, axis=0)

    leftwhite=[[255]*left]*(h+(2*top))
    i = np.append(leftwhite, i, axis=1)
    i = np.append(i, leftwhite, axis=1)
  
    all_digits[all_digits.index(itemp)]=i
    # plt.imshow(i)
    # plt.show()
    # print(i)
    # data = Image.fromarray(i)
    # data = data.convert("L")
    # print(data)
    # data.save('test'+str(counter)+'.jpg')
    # # counter=counter+1
    data = Image.fromarray(i)
    data = data.convert("L")

  processed_image.append(all_digits)
    # alldigitsarray.append(predict(data))
  return 

########-------- LIST CONTAINING DIGITS IN THE ROW IMAGE RETURNED---------##########

# all_digits=[]
# processed_image=[]

# y=Image.open('test6.jpeg')
# p=process(y)
# print(len(p))
# for dig in p:
#   for digg in dig:
#     plt.imshow(digg)
#     plt.show()
  
# for row in p:
#   for dig in row:
#     plt.imshow(dig)
#     plt.show()
  # print(row)

